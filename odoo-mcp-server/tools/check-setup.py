#!/usr/bin/env python3

"""
Script de v√©rification compl√®te du setup Odoo MCP Server
"""

import sys
import subprocess
import json
import platform
from pathlib import Path
import httpx
import asyncio

class SetupChecker:
    """V√©rificateur de configuration compl√®te"""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.success = []
    
    def check_python_version(self):
        """V√©rifier la version Python"""
        print("üêç V√©rification de Python...")
        version = sys.version_info
        if version.major == 3 and version.minor >= 8:
            self.success.append(f"Python {version.major}.{version.minor}.{version.micro} ‚úÖ")
        else:
            self.errors.append(f"Python 3.8+ requis, trouv√© {version.major}.{version.minor}")
    
    def check_dependencies(self):
        """V√©rifier les d√©pendances Python"""
        print("üì¶ V√©rification des d√©pendances...")
        
        required_packages = [
            "fastapi", "uvicorn", "httpx", "pydantic", 
            "python-dotenv", "websockets"
        ]
        
        for package in required_packages:
            try:
                __import__(package.replace("-", "_"))
                self.success.append(f"Package {package} install√© ‚úÖ")
            except ImportError:
                self.errors.append(f"Package {package} manquant")
    
    def check_env_file(self):
        """V√©rifier le fichier .env"""
        print("‚öôÔ∏è  V√©rification du fichier .env...")
        
        env_path = Path(".env")
        if not env_path.exists():
            self.warnings.append("Fichier .env manquant (utilisez: cp .env.example .env)")
            return
        
        required_vars = ["ODOO_URL", "ODOO_DATABASE", "ODOO_USERNAME", "ODOO_PASSWORD"]
        
        try:
            with open(env_path) as f:
                content = f.read()
            
            for var in required_vars:
                if f"{var}=" in content:
                    self.success.append(f"Variable {var} d√©finie ‚úÖ")
                else:
                    self.errors.append(f"Variable {var} manquante dans .env")
                    
        except IOError as e:
            self.errors.append(f"Erreur lecture .env: {e}")
    
    async def check_mcp_server(self):
        """V√©rifier que le serveur MCP r√©pond"""
        print("üöÄ V√©rification du serveur MCP...")
        
        try:
            async with httpx.AsyncClient() as client:
                # Test de sant√©
                response = await client.get("http://localhost:8000/health", timeout=5)
                if response.status_code == 200:
                    self.success.append("Serveur MCP accessible ‚úÖ")
                    
                    # Test mode
                    mode_response = await client.get("http://localhost:8000/mcp/mode")
                    if mode_response.status_code == 200:
                        mode_info = mode_response.json()
                        self.success.append(f"Mode MCP: {mode_info['mode']} ‚úÖ")
                    
                    # Test outils
                    tools_response = await client.post("http://localhost:8000/mcp/tools/list")
                    if tools_response.status_code == 200:
                        tools = tools_response.json()
                        tool_count = len(tools.get('tools', []))
                        self.success.append(f"{tool_count} outils MCP disponibles ‚úÖ")
                    
                else:
                    self.errors.append(f"Serveur MCP inaccessible (status: {response.status_code})")
                    
        except Exception as e:
            self.warnings.append(f"Serveur MCP non d√©marr√©: {e}")
    
    def check_claude_config(self):
        """V√©rifier la configuration Claude Desktop"""
        print("ü§ñ V√©rification configuration Claude Desktop...")
        
        system = platform.system().lower()
        
        if system == "windows":
            config_path = Path(os.environ.get("APPDATA", "")) / "Claude" / "claude_desktop_config.json"
        elif system == "darwin":
            config_path = Path.home() / "Library" / "Application Support" / "Claude" / "claude_desktop_config.json"
        else:
            config_path = Path.home() / ".config" / "Claude" / "claude_desktop_config.json"
        
        if not config_path.exists():
            self.warnings.append(f"Configuration Claude Desktop non trouv√©e: {config_path}")
            return
        
        try:
            with open(config_path) as f:
                config = json.load(f)
            
            if "mcpServers" in config:
                odoo_servers = [name for name in config["mcpServers"].keys() if "odoo" in name.lower()]
                if odoo_servers:
                    self.success.append(f"Serveurs Odoo MCP configur√©s: {', '.join(odoo_servers)} ‚úÖ")
                else:
                    self.warnings.append("Aucun serveur Odoo MCP configur√© dans Claude Desktop")
            else:
                self.warnings.append("Section mcpServers manquante dans configuration Claude")
                
        except (json.JSONDecodeError, IOError) as e:
            self.errors.append(f"Erreur lecture config Claude Desktop: {e}")
    
    def check_odoo_connection(self):
        """V√©rifier la connexion Odoo"""
        print("üè¢ V√©rification connexion Odoo...")
        
        try:
            # Utiliser le script de test existant
            result = subprocess.run([
                sys.executable, "examples/test_connection.py"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                self.success.append("Connexion Odoo fonctionnelle ‚úÖ")
            else:
                error_output = result.stderr or result.stdout
                self.errors.append(f"Erreur connexion Odoo: {error_output[:200]}...")
                
        except subprocess.TimeoutExpired:
            self.errors.append("Timeout connexion Odoo")
        except FileNotFoundError:
            self.warnings.append("Script test_connection.py non trouv√©")
        except Exception as e:
            self.errors.append(f"Erreur test Odoo: {e}")
    
    def check_nodejs_npm(self):
        """V√©rifier Node.js et npm pour Claude Desktop"""
        print("üü¢ V√©rification Node.js/npm...")
        
        try:
            # V√©rifier Node.js
            node_result = subprocess.run(["node", "--version"], capture_output=True, text=True)
            if node_result.returncode == 0:
                version = node_result.stdout.strip()
                self.success.append(f"Node.js {version} install√© ‚úÖ")
            else:
                self.warnings.append("Node.js non install√© (requis pour Claude Desktop)")
            
            # V√©rifier npm
            npm_result = subprocess.run(["npm", "--version"], capture_output=True, text=True)
            if npm_result.returncode == 0:
                version = npm_result.stdout.strip()
                self.success.append(f"npm {version} install√© ‚úÖ")
            else:
                self.warnings.append("npm non install√©")
                
        except subprocess.CalledProcessError:
            self.warnings.append("Erreur v√©rification Node.js/npm")
        except FileNotFoundError:
            self.warnings.append("Node.js/npm non trouv√©s dans PATH")
    
    def print_results(self):
        """Afficher les r√©sultats de v√©rification"""
        print("\n" + "="*60)
        print("üìã R√âSULTATS DE V√âRIFICATION")
        print("="*60)
        
        if self.success:
            print(f"\n‚úÖ Succ√®s ({len(self.success)}):")
            for item in self.success:
                print(f"   {item}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  Avertissements ({len(self.warnings)}):")
            for item in self.warnings:
                print(f"   {item}")
        
        if self.errors:
            print(f"\n‚ùå Erreurs ({len(self.errors)}):")
            for item in self.errors:
                print(f"   {item}")
        
        print(f"\nüìä Score: {len(self.success)} succ√®s, {len(self.warnings)} avertissements, {len(self.errors)} erreurs")
        
        if self.errors:
            print("\nüîß Actions recommand√©es:")
            if any("package" in error.lower() for error in self.errors):
                print("   - Installer les d√©pendances: pip install -r requirements.txt")
            if any(".env" in error for error in self.errors):
                print("   - Configurer .env: cp .env.example .env && nano .env")
            if any("odoo" in error.lower() for error in self.errors):
                print("   - V√©rifier param√®tres Odoo dans .env")
            if any("python" in error.lower() for error in self.errors):
                print("   - Mettre √† jour Python vers 3.8+")
        
        if self.warnings:
            print("\nüí° Suggestions:")
            if any("claude" in warning.lower() for warning in self.warnings):
                print("   - Configurer Claude Desktop: make claude-config")
            if any("serveur" in warning.lower() for warning in self.warnings):
                print("   - D√©marrer le serveur MCP: python start.py")
            if any("node" in warning.lower() for warning in self.warnings):
                print("   - Installer Node.js: https://nodejs.org/")
        
        return len(self.errors) == 0

async def main():
    """Fonction principale de v√©rification"""
    print("üîç V√âRIFICATION COMPL√àTE ODOO MCP SERVER")
    print("="*60)
    
    checker = SetupChecker()
    
    # V√©rifications synchrones
    checker.check_python_version()
    checker.check_dependencies()
    checker.check_env_file()
    checker.check_claude_config()
    checker.check_nodejs_npm()
    
    # V√©rifications asynchrones
    await checker.check_mcp_server()
    
    # V√©rification Odoo (peut √™tre lente)
    checker.check_odoo_connection()
    
    # Afficher r√©sultats
    success = checker.print_results()
    
    if success:
        print("\nüéâ Tout semble en ordre ! Votre serveur MCP Odoo est pr√™t.")
        print("\nüöÄ Prochaines √©tapes:")
        print("   1. D√©marrer le serveur: python start.py")
        print("   2. Tester avec Claude Desktop")
        print("   3. Ou utiliser l'exemple: python examples/client_example.py")
    else:
        print("\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s. Consultez les recommandations ci-dessus.")
        return False
    
    return True

if __name__ == "__main__":
    import os
    # Changer vers le r√©pertoire du script pour les chemins relatifs
    os.chdir(Path(__file__).parent.parent)
    
    success = asyncio.run(main())
    sys.exit(0 if success else 1)